import numpy as np
import random
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import math

def round_down(n, decimals=0):
    multiplier = 10 ** decimals
    return math.floor(n * multiplier) / multiplier

def GenerateCoorArray(N,x_size,y_size):
    pmcell=int(N/10)#number of pacemaker cells
    CoorStore = []
    for i in range(0,pmcell):
        Coor = []
        Coor.append(0)
        Coor.append(random.random()*y_size)
        CoorStore.append(Coor) 
    for i in range(pmcell,N):   
        Coor = []
        Coor.append(random.random()*x_size)
        Coor.append(random.random()*y_size)
        CoorStore.append(Coor) 
    return CoorStore

def distance_checker(R,i,j,CoorStore,y_size):
    if CoorStore[i][1]+R>100:
        d = ((CoorStore[i][0]- CoorStore[j][0])**2 + (CoorStore[i][1]-y_size - CoorStore[j][1]) **2 )**0.5
        if d < R:
            return True
        else:
            return False
    elif CoorStore[i][1]-R<0:
        d = ((CoorStore[i][0]- CoorStore[j][0])**2 + (CoorStore[i][1]+y_size - CoorStore[j][1]) **2 )**0.5
        if d < R:
            return True
        else:
            return False       
    else:
        d = ((CoorStore[i][0]- CoorStore[j][0])**2 + (CoorStore[i][1] - CoorStore[j][1]) **2 )**0.5
        if d < R:
            return True
        else:
            return False 
       
def ConnectionArray(N,x_size,y_size,CoorStore,R):
    ConnectionsStore = []
    for i in range(N):
        connections = []
        for j in range(N):
            if i !=j:
                if distance_checker(R,i,j,CoorStore,y_size) == True:
                    connections.append(j)
        ConnectionsStore.append(connections)
    return ConnectionsStore

def uniformdistrabutor(x):
    return x


def FunctionalArray(N,x_size,y_size,tau,delta,epsilon):
    taustore = []
    epsilonstore = []
    for i in range(N):
        taustore.append(tau)
        if random.random() < delta:
            epsilonstore.append(epsilon)
        else:
            epsilonstore.append(0)
    functionalstore  =[]
    functionalstore.append(taustore)
    functionalstore.append(epsilonstore)
    return functionalstore

def GenerateState(N):
    Statelist=[]
    for i in range(N):
        Statelist.append(0)
    return Statelist
#%%      
def PaceMaker(StateLattice,FunctionLattice,N):
    pmcell=int(N/10)
    for i in range(pmcell):
        rand=random.random()
        if rand>FunctionLattice[1][i]:
            StateLattice[i]= FunctionLattice[0][i] + 1                
    return StateLattice

def UpdateStateLattice(N, StateLattice, FunctionLattice, Connection):
  
    Updatedlist = []
    for i in range(N):
        Updatedlist.append(0)
    for i in range(N):
        if StateLattice[i] > 0: #reduce refractory period countdown by one
            Updatedlist[i] = StateLattice[i]- 1
            continue
            
        if StateLattice[i]== 0: #here check if any neighbours are in firing state
            rand=random.random()
            for j in range(len(Connection[i])):
                NeighNode=Connection[i][j]
                if StateLattice[NeighNode] == FunctionLattice[0][NeighNode]+1:
                    if rand>FunctionLattice[1][NeighNode]:
                        Updatedlist[i]=FunctionLattice[0][i]+1
    return Updatedlist

def RunState(TimeSteps,N,x_size,y_size,tau,delta,epsilon,r,T):
    Coordinates = GenerateCoorArray(N,x_size,y_size)
    Connections = ConnectionArray(N,x_size,y_size,Coordinates,r)
    FunctionListR = FunctionalArray(N,x_size,y_size,tau,delta,epsilon)
    StateLattice = GenerateState(N)
    
    LatticeStore = []

    for i in range(TimeSteps):
        
        if i == 0 or i % T == 0:
            StateLattice = PaceMaker(StateLattice,FunctionListR,N)
            LatticeStore.append(StateLattice)
        else:
            StateLattice = UpdateStateLattice(N,StateLattice,FunctionListR,Connections )
            LatticeStore.append(StateLattice)
    return LatticeStore, Coordinates, Connections

#%%
a=RunState(100,100,20,20,5,0.4,0.5,4,20)
x=[]
y=[]
for i in range(len(a[1])):
    x.append(a[1][i][0])
    y.append(a[1][i][1])

fig=plt.figure()

ims=[]
for i in range(len(a[0])):
    im=plt.scatter(x,y,c=a[0][i],edgecolors='r',cmap=plt.cm.binary)
    ims.append([im])
plt.colorbar()

ani = animation.ArtistAnimation(fig, ims, interval=100, 
                                repeat_delay=1000)
#%%
b=RunState(100,4000,100,100,5,0.4,0.6,4,20)
x=[]
y=[]
for i in range(len(b[1])):
    x.append(b[1][i][0])
    y.append(b[1][i][1])

fig=plt.figure()

ims=[]
for i in range(len(b[0])):
    im=plt.scatter(x,y,c=b[0][i],edgecolors='r',cmap=plt.cm.binary)
    ims.append([im])
plt.colorbar()

ani = animation.ArtistAnimation(fig, ims, interval=100, 
                                repeat_delay=1000)
#%%
N = 4000
x_size = 100
y_size = 100
c=RunState(100,N,x_size,y_size,5,0.4,0.6,4,20)

x_grid_size = 10
y_grid_size = 10
N_grid = x_grid_size*y_grid_size

grid_coor = []
for i in range(int(x_size/x_grid_size)):
    for j in range(int(y_size/y_grid_size)):
        grid_coor.append([i,j])
grid_container = []

for i in range(len(grid_coor)):
    grid_container.append([])

for i in range(len(c[1])):
    grid_coor_state = round_down(c[1][i][0]/x_grid_size), round_down(c[1][i][1]/y_grid_size) 
    print(int(grid_coor_state[0]*(x_size/x_grid_size) + grid_coor_state[1] -1),grid_coor_state)
    grid_container[int(grid_coor_state[0]*(x_size/x_grid_size) + grid_coor_state[1] -1)].append(i)
    
    


fig = plt.figure()
ims=[]
for i in range(len(c[0])):
    grid_sum = np.zeros([int(x_size/x_grid_size),int(y_size/y_grid_size)])
    for cell in range(len(grid_container)):
        sum = 0
        for node in range(len(grid_container[cell])):
            sum = sum + c[0][i][grid_container[cell][node]]
        grid_sum[grid_coor[cell][0]][grid_coor[cell][1]] = sum
    
    
    im=plt.imshow(grid_sum,interpolation='none',cmap=plt.cm.binary,animated=True)
    ims.append([im])
    
ani = animation.ArtistAnimation(fig, ims, interval=30, 
                                repeat_delay=1000)
